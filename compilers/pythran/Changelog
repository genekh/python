2018-02-05 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Slimmer generated binaries

	* Preliminary native Windows support for Python3

	* Several numpy-related function improvements

	* @ operator support

	* Better negative index support and range detection

	* Glimpses of OpenMP4 support, min/max support in OpenMP reductions

	* Python Capsule support

	* Work around GCC-7 parsing bug

2017-10-14 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Moving to networkx 2.0

	* List/Tuple partial constant folding

	* Minor notebook integration fixes

	* Minor cython integration fixes

	* Memory leak removal

	* Support out field in numpy.sum

2017-09-12 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Significant compilation time improvements (again)

	* Improved cython cooperation

	* Many OSX and Python3 integration fixes

	* Revive pure C++ mode

	* Exported functions now support keyword passing style

2017-07-04 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Significant compilation time improvements

	* Support for separated .pythran files

	* Many bug fixes and perf improvement

2017-01-05 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Python 3 support

	* (unsound) Type Checker

	* Various bug fixes and perf improvement, as usual

2016-07-05 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Fix install / setup minor issues

	* Restore OpenMP support

	* Fix GMP installation issue

2016-06-13 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Better Jupyter Note book integration

	* Numpy Broadcasting support

	* Improved value binding analysis

	* Simple inlining optimization

	* Type engine improvement

	* Less fat in the generated modules

	* More and better support for various Numpy functions

	* Various performance improvement

	* Global variable handling, as constants only though

2016-01-05 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* IPython's magic for pythran now supports extra compile flags

	* Pythran's C++ output is compatible with Python3 and pythran3 can compile it!

	* More syntax checks (and less template traceback)

	* Improved UI (multiline pythran exports, better setup.py...)

	* Pythonic leaning / bugfixing (this tends to be a permanent item)

	* More generic support for numpy's dtype

	* Simpler install (no more boost.python deps, nor nt2 configuration)

	* Faster compilation (no more boost.python deps, smarter pass manager)

	* Better testing (gcc + clang)

2015-10-13 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Significantly decrease compilation time

	* Faster execution of numpy generalized slicing

	* Tentative conda support

	* Tentative Windows support (using Win Python)

	* Preserve original docstrings

	* Add __pythran__ global variable to pythran generated modules

	* Faster implementation of various itertools functions

	* Rely on distutils for module code compilation

	* Support most of numpy.random

	* Remove git and make dependency to install nt2

	* Proper pip support instead of distuils

	* Remove dependency to boost.python

	* Remove dependency to tcmalloc

	* Pythonic library cleaning (less dependencies / header / splitting / mrpropering)

	* More lazy computations

	* More numpy function support (including dot on matrices, linalg.norm, mean)

	* Lot of code cleaning / refactoring (both in Python and C++)

	* Many bugfixes, thanks to all the bug reporters!

2015-04-06 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Various numpy.* function implementation improvement (incl. concatenate,
	  str.join, itertools.combinations)

	* Better error detection during install step

	* 32 bit compatibility

	* Complete rewrite of the expression engine

	* Improved support of numpy extended expression

	* Better user feedback on invalid pythran spec

	* More efficient support of string litterals

	* Faster exponentiation when index is an integer

	* NT2 revision bump

	* No-copy list as numpy expression parameters

	* Accept C and fortran layout for input arrays

	* Range value analysis and boundcheck removal

	* Newaxis style indexing

	* Better array-of-complex support

	* Glimpses of python3 support

	* Support for importing user defined modules

	* Archlinux support

	* Accept strided array as exported function input

2014-10-22 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Full SIMD support! Almost all numpy expressions are vectorized

	* Better memory management at the Python/C++ layer, esp. when sharing

	* Support named parameters

	* Better complex numbers support

	* A lot of internal code cleaning

	* Better code generation for regular loops

	* MacOS install guide & ArchLinux packages

	* Travis run the test suite, w and w/ SIMD, w and w/ OpenMP

	* Many performance improvements at the numpy expression level

	* Faster array copies, including slices

	* Much better constant folding

	* Distutils support through a PythranExtension

	* Improve implementation of many numpy functions

	* Improve forward substitution

	* Use most recent nt2 version

	* Make dependency on libgomp optional

2014-05-17 Serge Guelton <serge.guelton@telecom-bretagne.eu>

	* Improved C++ compilation time (twice as fast)

	* Efficient extended slicing

	* Support most numpy dtype ([u]int8,..., [u]int64, float32, float64)

	* Support indexing array through boolean array

	* Add a nice Pythran logo :-)

	* Improve validation *a lot*

	* Reduce native module loading overhead

	* Forward substitution implementation

	* More numpy support and *many* bug fixes!

	* Remove array auto vectorization/parallelization
